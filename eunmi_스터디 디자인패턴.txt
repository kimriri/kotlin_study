/*
  참조 : https://github.com/dbacinski/Design-Patterns-In-Kotlin
  * * 소프트 웨어 디자인 패턴
  * 소프트 웨어 디자인 패턴은 소프트웨어 디자인에서 특정 문액에서
  * 공통적으로 발생하는 문제에 대해 재사용 가능한 해결책이다.
  * 쉽게 말하면 소스코드를 짤때 스파게티 코드가 되는것을 방지하고
  * 코드를 좀더 유연하게 사용하기 위해 적용 합니다.
  * 코틀린에서 대표적으로 사용 되는 디자인 패턴은 크게 3가지로 나뉘는데
  * 행위,생성,구조 패턴으로 나눌 수 있습니다.
  * 행위패턴은 어떠한 처리의 책임을 어느 객체에 할당하거나 알고리즘을
  * 어떤 객체에 정의하는게 좋을 것인지에 대한 것을 실현 하는 패턴 입니다.
  *
  * 행위 패턴의 예로는
  * Strategy patten
  * Observer patten
  * Command patten
  * State patten
  * Mediator pateen 등이 있습니다.
  *
  * 생성 패턴은 객체의 생성을 제어함으로써 설계를 좀더 간단하고 설계의 복잡성으로 인한
  * 여러가지 문제들을 해결 할 수있습니다.
  *
  * 생성 패턴의 예로는
  * Singleton patten
  * Factory Method patten
  * Abstract Factory patten 등이 있습니다.
  *
  * 구조패턴은 개체간의 관계를 실현 할 수 있는는 간단한 방법으로 설계를 용이하게 해줍니다.
  *
  * 구조 패던의 예로는
  * Adapter patten
  * Decorator patten
  * Facade patten 등이 있습니다.
 */
